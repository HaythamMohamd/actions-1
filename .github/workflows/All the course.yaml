# name: cosway with shell script

# on: push

# jobs:
#   first_job:
#     runs-on: ubuntu-latest
#     steps:
#     - name: welcome message
#       run: echo "my first github actions job"
    
#     - name: clone the repo
#       uses: actions/checkout@v4

#     - name: list files
#       run: ls

#     - name: executing the cowsay script
#       run: |
#         chmod +x cowsay.sh
#         ./cowsay.sh
    # - name: install cosway
    #   run: sudo apt-get install cowsay -y

    # - name: generate ASCII artwork
    #   run: cowsay -f dargon "Run for cover, I am a dragon ... RARW" >> dragon.txt

    # - name: read file
    #   run: cat dragon.txt

################################################## needs ##################################################
# name: cosway with needs then uplaod and download

# on: push

# jobs:
#   build_job_1:
#     runs-on: ubuntu-latest
#     steps:
#     - name: install cosway
#       run: sudo apt-get install cowsay -y

#     - name: generate ASCII artwork
#       run: cowsay -f dragon "Run for cover, I am a dragon ... RARW" >> dragon.txt

#     - name: read file
#       run: cat dragon.txt

#     - name: upload the dragon.tx file to be downloaded after that from other jobs
#       uses: actions/upload-artifact@v4
#       with:
#         name: dragon-text-file
#         path: dragon.txt

#     - name: sleep for 30 sec
#       run: sleep 30

#   test_job_2:
#     needs: build_job_1
#     runs-on: ubuntu-latest
#     steps:

#     - name: sleep for 30 sec
#       run: sleep 30

#     - name: download  the dragon.tx file to cat it
#       uses: actions/download-artifact@v4
#       with:
#         name: dragon-text-file

#     - name: test file exists
#       run: grep -i "dragon" dragon.txt

#   deploy_job_3:
#     needs: [build_job_1, test_job_2]
#     runs-on: ubuntu-latest
#     steps:
#     - name: download  the dragon.tx file to cat it
#       uses: actions/download-artifact@v4
#       with:
#         name: dragon-text-file

#     - name: read file
#       run: cat dragon.txt


################################################## 03- variables and secres ##################################################

# name: Exploring variables and secrets

# on: push

# env:
#     CONTAINER_REGISTERY: docker.io
#     IMAGE_NAME: github-actions

# jobs:
#   docker:
#     runs-on: ubuntu-latest
#     steps:
#     - name: docker build 
#       run: echo docker build -t ${{ env.CONTAINER_REGISTERY }}/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

#     - name: docker login
#       # env:
#       #   DOCKER_PASSWORD: 
#       run: echo docker login --username=$${{ vars.DOCKER_USERNAME }} --pasword=${{ secrets.DOCKER_PASSWORD}}

#     - name: docker publish
#       run: echo docker push $CONTAINER_REGISTERY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

#   deploy:
#     needs: docker
#     runs-on: ubuntu-latest
#     steps:

#     - name: docker run
#       run: echo docker run -d -p 8080:80 $CONTAINER_REGISTERY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

################################################## 04- schedual , workflow_dispatch ##################################################

# name: Exploring variables and secrets

# # on: push
# on: 
#   workflow_dispatch
#   # schedule:
#   #   - cron: "*/1 * * * *" ## ever 1 min

# env:
#     CONTAINER_REGISTERY: docker.io
#     IMAGE_NAME: github-actions

# jobs:
#   docker:
#     runs-on: ubuntu-latest
#     steps:
#     - name: docker build 
#       run: echo docker build -t ${{ env.CONTAINER_REGISTERY }}/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

#     - name: docker login
#       # env:
#       #   DOCKER_PASSWORD: 
#       run: echo docker login --username=$${{ vars.DOCKER_USERNAME }} --pasword=${{ secrets.DOCKER_PASSWORD}}

#     - name: docker publish
#       run: echo docker push $CONTAINER_REGISTERY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

#   deploy:
#     needs: docker
#     runs-on: ubuntu-latest
#     steps:

#     - name: docker run
#       run: echo docker run -d -p 8080:80 $CONTAINER_REGISTERY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

################################################## 04- Job concurrency  ##################################################

# name: Job concurrency

# on: push

# env:
#     CONTAINER_REGISTERY: docker.io
#     IMAGE_NAME: github-actions

# jobs:
#   docker:
#     runs-on: ubuntu-latest
#     steps:
#     - name: docker build 
#       run: echo docker build -t ${{ env.CONTAINER_REGISTERY }}/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

#     - name: docker login
#       # env:
#       #   DOCKER_PASSWORD: 
#       run: echo docker login --username=$${{ vars.DOCKER_USERNAME }} --pasword=${{ secrets.DOCKER_PASSWORD}}

#     - name: docker publish
#       run: echo docker push $CONTAINER_REGISTERY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

#   deploy:
#     needs: docker
#     concurrency:
#       group: production-deployment
#       cancel-in-progress: true  ## dah el default , momken a5leeha false 
#     runs-on: ubuntu-latest
#     steps:

#     - name: docker run
#       run: | 
#         echo docker run -d -p 8080:80 $CONTAINER_REGISTERY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest
#         sleep 600

################################################## 04- Job concurrency false and timeout-minutes 1min ##################################################

# name: Job concurrency

# on: push

# env:
#     CONTAINER_REGISTERY: docker.io
#     IMAGE_NAME: github-actions

# jobs:
#   docker:
#     runs-on: ubuntu-latest
#     steps:
#     - name: docker build 
#       run: echo docker build -t ${{ env.CONTAINER_REGISTERY }}/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

#     - name: docker login
#       # env:
#       #   DOCKER_PASSWORD: 
#       run: echo docker login --username=$${{ vars.DOCKER_USERNAME }} --pasword=${{ secrets.DOCKER_PASSWORD}}

#     - name: docker publish
#       run: echo docker push $CONTAINER_REGISTERY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

#   deploy:
#     needs: docker
#     concurrency:
#       group: production-deployment
#       cancel-in-progress: false  ## dah el default , momken a5leeha false 
#     runs-on: ubuntu-latest
#     steps:

#     - name: docker run
#       timeout-minutes: 1
#       run: | 
#         echo docker run -d -p 8080:80 $CONTAINER_REGISTERY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest
#         sleep 6000

################################################## 05- Matrix config ##################################################

name: Matrix config

on: push
jobs:
  deploy_on_ubuntu:
    runs-on: ubuntu-latest
    steps:
    - name: Echo docker detatils 
      run: docker info

    - name: Run images
      run: docker run hello world

  deploy_on_windows:
    runs-on: windows-latest
    steps:
    - name: Echo docker detatils 
      run: docker info

    - name: Run images
      run: docker run hello world